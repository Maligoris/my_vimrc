:h x - справка по конкретной команде, где x имя команды

* - Нахождение таких-же слов, навести на слово и нажимать * 
!sort - Сортировка текста (Выделить текст и нажать !sort)
Ctrl a - Увеличить число под курсором на единицу
Ctrl x - Уменьшить число под курсором на единицу
:ab mas Maslow'shierarchy of needs - для раскрытия аббревиатуры, mas автоматом когда вы наберете <space>.
.!ls - выполнить команду ls и вставить результат в редактор (Работает и с другими командами например pwd)
!python % - запустить файл python (% это текущий открытый файл)
:term - запуск терминала в новом окне
shift " shift +   y  - Скопировать в буфер компьютера
gq - форматирование кода встроенным в vim методом
Ctrl n или Ctrl p - в INSERT MODE, выводит список вариантов автодополнения

:shell (потом ввести в терминале) chmod u+w файл.txt (потом выйти из shell командой exit) exit (и в конце заставим vim записать файл :w!) :w!  -  Нужно для записи файла защищенного от записи если мы забыли запустить через sudo

                              ПЕРЕМЕЩЕНИЕ
`.  - последнее место редактирования
Ctrl 6  - Предыдущий файл  
fx - переместить курсор на первый встречный символ x(вместо х что угодно)
3fx - переместить курсор на третье вхождение символа x
tx - переместить курсор на символ перед символом x
Shift a или Shift i - Начать редактиовать с начала строки или с конца

                        ВЫДЕЛЕНИЕ И УДАЛЕНИЕ ТЕКСТА
vip - выделить параграф
V - выделить строку
di( - вырезать содержимое круглых скобок
dfx - удалить все от текущей позици до символа "x"
vt# - выделить всё до символа # где # любая буква или символ
Ctrl-w - в INSERT моде, удалить слово перед курсором (Не записывая в регистр)
"0p - Вставить то что было скопировано в с помощью 'y', но перезаписалось при удалении


                                ВКЛАДКИ
:tabedit <file> - для открытия нескольких файлов в "tabs" как в браузере
:tabnew - для открытия новой закладки
:tabm - для изменения порядка закладок (:tabmove 0 - например)

                               ПОИСК И ЗАМЕНА
:s - Поиск и замена (:предел от, предел доs/pattern/replacement text/options)
:s/foo/bar/g - замена только на этой линии
:x,ys/foo/bar - замена в диапазоне от x до y (x и y стоки)
:%s/foo/bar/gci - заменить все foo на bar в файле (g - global весь файл, опция c - подтверждение изменения, i - без учета регистра)

:lcd %:p:h - (для текущего буфера) Смена директории на ту в которой открыт данный файл 
:cd %:p:h - Смена директории на ту в которой открыт данный файл

                                ОКНА и БУФЕРЫ
:Ex или :Sex или :Vex - просмотр файловой системы (% Создание файла, d папки) сокращение от Explore
:edit hello.txt для окрытия файла (Можно просто :e)
:args *.py открыть все файлы с расширениеми *.py
:ls список буферов
:b имя_буфера - переключиться на буфер, комбинируется с табом, 
пишем :b domain, жмём таб и нам подставляется открытый iis_domain.cpp
:bd - удалить текущий буфер
:bd имя_буфера - удалить буфер по имени
Ctrl-w s — разделить окно по горизонтали
Ctrl-w v — тоже, только по вертикали
Ctrl-w | или =  - Скрыть или открыть все окна по вертикали
Ctrl-n  -  Переключить текущее окно на след окно в буфере
Ctrl-w h j k l - Переключить окна влево - вверх - вниз - вправо

                                РЕГИСТРЫ
"x - использовать регистр с именем для того чтобы выполнить следующую операцию ("x4yy - Копировать следующие 4 строки в регистр с именем 'x')
Потом нажимаем "xp - вставить текст из регистра с именем 'x'
:registers - Для просмотра содержимого всех регистров
                                СВЕРТКА
zf - Свертка. Выделяем участок с помощью v и нажимаем zf
пробел - открыть - закрыть участок текста
                                                               
                                МАКРОСЫ
qq --- включили запись в регистр q. Делаете, что вам надо --- поиск, замена, команды движения, вставка текста, переход между вкладками --- без ограничений. Даже из Вим можно выйти.
q --- конец записи
@q --- повтор серии действий
@@ --- вызов последнего вызыванного макроса
qaq --- очистить регистр, где <a> это имя макроса 

:let @a = '' - очистить регистр, где <a> это имя макроса 
:let @b=@a - сохранить макрос b в макрос a

  Для рекурсивного вызова можно начать записывать макрос сделать действия, перед концом записи <q> вызываем этот макрос @a - где <a> имя макроса.
Таким образом макрос сделает работу до конца файла.
  Макросы сохраняются в буферы, мы можем писать макрос на прямую в текст, что бы поместить в файл текст существующего макроса нужно нажать "[a-z]p, потом можно сохранить его, в следующий раз открыть текст скопировать макрос в буфер "[a-z]y и запустить его. 

                    КОМБИНАЦИИ ДЛЯ ПЛАГИНОВ(МОИХ)
gp - Get Prettier для плагина Pretier, форматирование кода
\a - Включение/Выключение выявления ошибок, плагин A.L.E
]r и [r - Перемещение к ошибкам, плагин A.L.E
Ctrl-y ,  - Плагин Emmet, автодополнение HTML и CSS
gcc или выделить блок и gc - Плагин tpope закоментировать текущую строку
; - Плагин FZF, буферы
\f - Плагин FZF, нечёткий поиск файлов
\t - Плагин FZF, поиск Тэгов в проэкте
Ctrl-n - Плагин vim-react-snippets. (По умолчанию Tab, изменить можно в файле Плагина)
