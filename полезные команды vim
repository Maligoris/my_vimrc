:h x - справка по конкретной команде, где x имя команды
K — посмотреть man-страницу слова под курсором

                       РАЗНОЕ
~ — изменить регистр букв на противоположный по мере прохождения курсора
!sort - Сортировка текста (Выделить текст и нажать !sort)
:args *.py открыть все файлы с расширениеми *.py
Ctrl+a - Увеличить число под курсором на единицу
Ctrl+x - Уменьшить число под курсором на единицу
:ab mas Maslow'shierarchy of needs - для раскрытия аббревиатуры, mas автоматом когда вы наберете <space>.
.!ls - выполнить команду ls и вставить результат в редактор (Работает и с другими командами например pwd) 
!python % - запустить файл python (% это текущий открытый файл)
:term - запуск терминала в новом окне
gq+{motion} - форматирование кода встроенным в vim методом, {motion} - команда
Ctrl+n или Ctrl+p - в INSERT MODE, выводит список вариантов автодополнения
:shell (потом ввести в терминале) chmod u+w файл.txt (потом выйти из shell командой exit) exit (и в конце заставим vim записать файл :w!) :w!  -  Нужно для записи файла защищенного от записи если мы забыли запустить через sudo
gf — открыть файл с именем, находящимся под курсором (под курсором должен быть путь) 

                       РЕЖИМ ВСТАВКИ (INSERT)
Shift+a или Shift+i - Начать редактиовать с начала строки или с конца
Ctrl+h — удаляет последний символ
Ctrl+w - удалить слово перед курсором (Не записывая в регистр)
Ctrl+u — удаляет все символы от начала строки до курсора
Ctrl+t — вставить табуляцию в начало текущей строки
Ctrl+d — удалить табуляцию из начала текущей строки
Ctrl+o <command> — выполняет команду command и возвращается обратно в режим вставки

                       ПЕРЕМЕЩЕНИЕ, ПРОСМОТР, МЕТКИ 
`.  - последнее место редактирования
f+<symbol> — передвинуться вперед (forward) к символу <symbol> в текущей строке (Например: 3fx - переместить курсор на третье вхождение символа x)
F+<symbol> — назад (backward) к символу <symbol> в текущей строке
tx - переместить курсор на символ перед символом x
% — когда под курсором находится скобка, то нажатие на % переместит курсор на соответствующую парную скобку
( — передвинуть курсор назад на предложение (до точки)
) — передвинуть курсор вперед на одно предложение
} — абзац вниз (до пустой строки)
{ — абзац вверх

Ctrl+6  - Предыдущий файл  
Ctrl+e — прокрутка строк вниз 
Ctrl+y — прокрутка строк вверх
Ctrl+f или Ctrl+d — прокрутка страницы вниз
Ctrl+u - прокрутка страницы вверх

ma -  создает метку в a
`a — перемещает курсор на метку «a» (конкретное место)
‘a — перемещает курсор на начало строки, содержащей метку «a»
Ctrl+o/Ctrl+i — перемещение к ранее посещенным меткам назад и вперед
:marks — показать все определенные метки.


                       ВЫДЕЛЕНИЕ, УДАЛЕНИЕ, КОПИРОВАНИЕ ТЕКСТА 
vip - выделить параграф
vt# - выделить всё до символа # где # любая буква или символ
V - выделить строку
o/O — перемещают курсор в разные концы выделенного блока для изменения размеров
gv — выделяет текст, который был выделен прошлой командой выделения
!<command> — отфильтровать выделенные строки с помощью внешней программы

di( - удалить содержимое круглых скобок
dfx - удалить все от текущей позици до символа "x"
d/<pattern> — удаляет текст начиная с текущего положения курсора до первого встретившегося «pattern», не включая его
daw — удаляет слово, даже когда курсор находится в середине этого слова
ciw — удаляет слово под курсором и переходит в режим вставки

shift+" + y  - Скопировать в буфер обмена компьютера
"0p - Вставить то что было скопировано в с помощью 'y', но перезаписалось при удалении

                       ВКЛАДКИ
:tabedit <file> - для открытия нескольких файлов в "tabs" как в браузере
:tabnew - для открытия новой закладки
:tabm - для изменения порядка закладок (:tabmove 0 - например)
gt/gT - следующий и предыдущий таб (5gT - 5 табов назад)

                       ПОИСК И ЗАМЕНА
* - Нахождение таких-же слов, навести на слово и нажимать * или n
:s - Поиск и замена (:предел от, предел доs/pattern/replacement text/options)
:s/foo/bar/g - замена только на этой линии
:x,ys/foo/bar - замена в диапазоне от x до y (x и y стоки)
:%s/foo/bar/gci - заменить все foo на bar в файле (g - global весь файл, опция c - подтверждение изменения, i - без учета регистра)

                       ОКНА, NETRW и БУФЕРЫ
Ctrl+w s — разделить окно по горизонтали
Ctrl+w v — тоже, только по вертикали
Ctrl+w | или =  - Скрыть или открыть все окна по вертикали
Ctrl+n  -  Переключить текущее окно на след окно в буфере
Ctrl+w h j k l - Переключить курсор на окно влево - вверх - вниз - вправо
Ctrl+w f — разделить и в новом окне открыть файл, путь к которому находится под курсором

:Ex или :Sex или :Vex - просмотр файловой системы через netrw. Сокращения от Explore
%  - создать файл
d  - создать папку
D  - удалить
R  - переименовать
s  - сортировка по:
f1 - help
-  - навигация на 1 папку назад

:edit hello.txt для окрытия файла (Можно просто :e)
:ls список буферов
:b имя_буфера - переключиться на буфер, комбинируется с табом, 
пишем :b domain, жмём таб и нам подставляется открытый iis_domain.cpp
:bd - удалить текущий буфер
:bd имя_буфера - удалить буфер по имени

                       СВЕРТКА
zf - Свертка. Выделяем участок с помощью v и нажимаем zf
пробел - открыть - закрыть участок текста
                                                               
                       РЕГИСТРЫ и МАКРОСЫ 
"x - использовать регистр с именем для того чтобы выполнить следующую операцию ("x4yy - Копировать следующие 4 строки в регистр с именем 'x')
Потом нажимаем "xp - вставить текст из регистра с именем 'x'
:registers - Для просмотра содержимого всех регистров

qq --- включили запись в регистр q. Делаете, что вам надо --- поиск, замена, команды движения, вставка текста, переход между вкладками --- без ограничений. Даже из Вим можно выйти.
q --- конец записи
@q --- повтор серии действий
@@ --- вызов последнего вызыванного макроса
qaq --- очистить регистр, где <a> это имя макроса 
:let @a = '' - очистить регистр, где <a> это имя макроса 
:let @b=@a - сохранить макрос b в макрос a

 Для рекурсивного вызова можно начать записывать макрос сделать действия, перед концом записи <q> вызываем этот макрос @a - где <a> имя макроса.
Таким образом макрос сделает работу до конца файла.
  Макросы сохраняются в буферы, мы можем писать макрос на прямую в текст, что бы поместить в файл текст существующего макроса нужно нажать "[a-z]p, потом можно сохранить его, в следующий раз открыть текст скопировать макрос в буфер "[a-z]y и запустить его. 

 
                       КОМБИНАЦИИ ДЛЯ ПЛАГИНОВ(МОИХ)
gp - Get Prettier для плагина Pretier, форматирование кода
\a - Включение/Выключение выявления ошибок, плагин A.L.E
]r и [r - Перемещение к ошибкам, плагин A.L.E
Ctrl+y ,  - Плагин Emmet, автодополнение HTML и CSS
gcc или выделить блок и gc - Плагин tpope/vim-commentary закоментировать текущую строку
; - Плагин FZF, буферы
\f - Плагин FZF, нечёткий поиск файлов
\t - Плагин FZF, поиск Тэгов в проэкте
Ctrl+n - Плагин vim-react-snippets. (По умолчанию Tab, изменить можно в файле Плагина)
